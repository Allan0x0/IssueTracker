
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `IssueType` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model IssueType
 * 
 */
export type IssueTypeModel = runtime.Types.Result.DefaultSelection<Prisma.$IssueTypePayload>

export type AggregateIssueType = {
  _count: IssueTypeCountAggregateOutputType | null
  _avg: IssueTypeAvgAggregateOutputType | null
  _sum: IssueTypeSumAggregateOutputType | null
  _min: IssueTypeMinAggregateOutputType | null
  _max: IssueTypeMaxAggregateOutputType | null
}

export type IssueTypeAvgAggregateOutputType = {
  id: number | null
}

export type IssueTypeSumAggregateOutputType = {
  id: number | null
}

export type IssueTypeMinAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  identifier: string | null
}

export type IssueTypeMaxAggregateOutputType = {
  id: number | null
  createdAt: Date | null
  updatedAt: Date | null
  identifier: string | null
}

export type IssueTypeCountAggregateOutputType = {
  id: number
  createdAt: number
  updatedAt: number
  identifier: number
  _all: number
}


export type IssueTypeAvgAggregateInputType = {
  id?: true
}

export type IssueTypeSumAggregateInputType = {
  id?: true
}

export type IssueTypeMinAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  identifier?: true
}

export type IssueTypeMaxAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  identifier?: true
}

export type IssueTypeCountAggregateInputType = {
  id?: true
  createdAt?: true
  updatedAt?: true
  identifier?: true
  _all?: true
}

export type IssueTypeAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IssueType to aggregate.
   */
  where?: Prisma.IssueTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IssueTypes to fetch.
   */
  orderBy?: Prisma.IssueTypeOrderByWithRelationInput | Prisma.IssueTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.IssueTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IssueTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IssueTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned IssueTypes
  **/
  _count?: true | IssueTypeCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: IssueTypeAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: IssueTypeSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IssueTypeMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IssueTypeMaxAggregateInputType
}

export type GetIssueTypeAggregateType<T extends IssueTypeAggregateArgs> = {
      [P in keyof T & keyof AggregateIssueType]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIssueType[P]>
    : Prisma.GetScalarType<T[P], AggregateIssueType[P]>
}




export type IssueTypeGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IssueTypeWhereInput
  orderBy?: Prisma.IssueTypeOrderByWithAggregationInput | Prisma.IssueTypeOrderByWithAggregationInput[]
  by: Prisma.IssueTypeScalarFieldEnum[] | Prisma.IssueTypeScalarFieldEnum
  having?: Prisma.IssueTypeScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IssueTypeCountAggregateInputType | true
  _avg?: IssueTypeAvgAggregateInputType
  _sum?: IssueTypeSumAggregateInputType
  _min?: IssueTypeMinAggregateInputType
  _max?: IssueTypeMaxAggregateInputType
}

export type IssueTypeGroupByOutputType = {
  id: number
  createdAt: Date
  updatedAt: Date
  identifier: string
  _count: IssueTypeCountAggregateOutputType | null
  _avg: IssueTypeAvgAggregateOutputType | null
  _sum: IssueTypeSumAggregateOutputType | null
  _min: IssueTypeMinAggregateOutputType | null
  _max: IssueTypeMaxAggregateOutputType | null
}

type GetIssueTypeGroupByPayload<T extends IssueTypeGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IssueTypeGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IssueTypeGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IssueTypeGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IssueTypeGroupByOutputType[P]>
      }
    >
  >



export type IssueTypeWhereInput = {
  AND?: Prisma.IssueTypeWhereInput | Prisma.IssueTypeWhereInput[]
  OR?: Prisma.IssueTypeWhereInput[]
  NOT?: Prisma.IssueTypeWhereInput | Prisma.IssueTypeWhereInput[]
  id?: Prisma.IntFilter<"IssueType"> | number
  createdAt?: Prisma.DateTimeFilter<"IssueType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IssueType"> | Date | string
  identifier?: Prisma.StringFilter<"IssueType"> | string
  issues?: Prisma.IssueListRelationFilter
}

export type IssueTypeOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  identifier?: Prisma.SortOrder
  issues?: Prisma.IssueOrderByRelationAggregateInput
  _relevance?: Prisma.IssueTypeOrderByRelevanceInput
}

export type IssueTypeWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.IssueTypeWhereInput | Prisma.IssueTypeWhereInput[]
  OR?: Prisma.IssueTypeWhereInput[]
  NOT?: Prisma.IssueTypeWhereInput | Prisma.IssueTypeWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"IssueType"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"IssueType"> | Date | string
  identifier?: Prisma.StringFilter<"IssueType"> | string
  issues?: Prisma.IssueListRelationFilter
}, "id">

export type IssueTypeOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  identifier?: Prisma.SortOrder
  _count?: Prisma.IssueTypeCountOrderByAggregateInput
  _avg?: Prisma.IssueTypeAvgOrderByAggregateInput
  _max?: Prisma.IssueTypeMaxOrderByAggregateInput
  _min?: Prisma.IssueTypeMinOrderByAggregateInput
  _sum?: Prisma.IssueTypeSumOrderByAggregateInput
}

export type IssueTypeScalarWhereWithAggregatesInput = {
  AND?: Prisma.IssueTypeScalarWhereWithAggregatesInput | Prisma.IssueTypeScalarWhereWithAggregatesInput[]
  OR?: Prisma.IssueTypeScalarWhereWithAggregatesInput[]
  NOT?: Prisma.IssueTypeScalarWhereWithAggregatesInput | Prisma.IssueTypeScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"IssueType"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"IssueType"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"IssueType"> | Date | string
  identifier?: Prisma.StringWithAggregatesFilter<"IssueType"> | string
}

export type IssueTypeCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  identifier: string
  issues?: Prisma.IssueCreateNestedManyWithoutIssueTypeInput
}

export type IssueTypeUncheckedCreateInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  identifier: string
  issues?: Prisma.IssueUncheckedCreateNestedManyWithoutIssueTypeInput
}

export type IssueTypeUpdateInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  identifier?: Prisma.StringFieldUpdateOperationsInput | string
  issues?: Prisma.IssueUpdateManyWithoutIssueTypeNestedInput
}

export type IssueTypeUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  identifier?: Prisma.StringFieldUpdateOperationsInput | string
  issues?: Prisma.IssueUncheckedUpdateManyWithoutIssueTypeNestedInput
}

export type IssueTypeCreateManyInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  identifier: string
}

export type IssueTypeUpdateManyMutationInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  identifier?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IssueTypeUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  identifier?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IssueTypeScalarRelationFilter = {
  is?: Prisma.IssueTypeWhereInput
  isNot?: Prisma.IssueTypeWhereInput
}

export type IssueTypeOrderByRelevanceInput = {
  fields: Prisma.IssueTypeOrderByRelevanceFieldEnum | Prisma.IssueTypeOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type IssueTypeCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  identifier?: Prisma.SortOrder
}

export type IssueTypeAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IssueTypeMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  identifier?: Prisma.SortOrder
}

export type IssueTypeMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  identifier?: Prisma.SortOrder
}

export type IssueTypeSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type IssueTypeCreateNestedOneWithoutIssuesInput = {
  create?: Prisma.XOR<Prisma.IssueTypeCreateWithoutIssuesInput, Prisma.IssueTypeUncheckedCreateWithoutIssuesInput>
  connectOrCreate?: Prisma.IssueTypeCreateOrConnectWithoutIssuesInput
  connect?: Prisma.IssueTypeWhereUniqueInput
}

export type IssueTypeUpdateOneRequiredWithoutIssuesNestedInput = {
  create?: Prisma.XOR<Prisma.IssueTypeCreateWithoutIssuesInput, Prisma.IssueTypeUncheckedCreateWithoutIssuesInput>
  connectOrCreate?: Prisma.IssueTypeCreateOrConnectWithoutIssuesInput
  upsert?: Prisma.IssueTypeUpsertWithoutIssuesInput
  connect?: Prisma.IssueTypeWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.IssueTypeUpdateToOneWithWhereWithoutIssuesInput, Prisma.IssueTypeUpdateWithoutIssuesInput>, Prisma.IssueTypeUncheckedUpdateWithoutIssuesInput>
}

export type IssueTypeCreateWithoutIssuesInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  identifier: string
}

export type IssueTypeUncheckedCreateWithoutIssuesInput = {
  id?: number
  createdAt?: Date | string
  updatedAt?: Date | string
  identifier: string
}

export type IssueTypeCreateOrConnectWithoutIssuesInput = {
  where: Prisma.IssueTypeWhereUniqueInput
  create: Prisma.XOR<Prisma.IssueTypeCreateWithoutIssuesInput, Prisma.IssueTypeUncheckedCreateWithoutIssuesInput>
}

export type IssueTypeUpsertWithoutIssuesInput = {
  update: Prisma.XOR<Prisma.IssueTypeUpdateWithoutIssuesInput, Prisma.IssueTypeUncheckedUpdateWithoutIssuesInput>
  create: Prisma.XOR<Prisma.IssueTypeCreateWithoutIssuesInput, Prisma.IssueTypeUncheckedCreateWithoutIssuesInput>
  where?: Prisma.IssueTypeWhereInput
}

export type IssueTypeUpdateToOneWithWhereWithoutIssuesInput = {
  where?: Prisma.IssueTypeWhereInput
  data: Prisma.XOR<Prisma.IssueTypeUpdateWithoutIssuesInput, Prisma.IssueTypeUncheckedUpdateWithoutIssuesInput>
}

export type IssueTypeUpdateWithoutIssuesInput = {
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  identifier?: Prisma.StringFieldUpdateOperationsInput | string
}

export type IssueTypeUncheckedUpdateWithoutIssuesInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  identifier?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type IssueTypeCountOutputType
 */

export type IssueTypeCountOutputType = {
  issues: number
}

export type IssueTypeCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  issues?: boolean | IssueTypeCountOutputTypeCountIssuesArgs
}

/**
 * IssueTypeCountOutputType without action
 */
export type IssueTypeCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueTypeCountOutputType
   */
  select?: Prisma.IssueTypeCountOutputTypeSelect<ExtArgs> | null
}

/**
 * IssueTypeCountOutputType without action
 */
export type IssueTypeCountOutputTypeCountIssuesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.IssueWhereInput
}


export type IssueTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  identifier?: boolean
  issues?: boolean | Prisma.IssueType$issuesArgs<ExtArgs>
  _count?: boolean | Prisma.IssueTypeCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["issueType"]>



export type IssueTypeSelectScalar = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  identifier?: boolean
}

export type IssueTypeOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "identifier", ExtArgs["result"]["issueType"]>
export type IssueTypeInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  issues?: boolean | Prisma.IssueType$issuesArgs<ExtArgs>
  _count?: boolean | Prisma.IssueTypeCountOutputTypeDefaultArgs<ExtArgs>
}

export type $IssueTypePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "IssueType"
  objects: {
    issues: Prisma.$IssuePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    createdAt: Date
    updatedAt: Date
    identifier: string
  }, ExtArgs["result"]["issueType"]>
  composites: {}
}

export type IssueTypeGetPayload<S extends boolean | null | undefined | IssueTypeDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$IssueTypePayload, S>

export type IssueTypeCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<IssueTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IssueTypeCountAggregateInputType | true
  }

export interface IssueTypeDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IssueType'], meta: { name: 'IssueType' } }
  /**
   * Find zero or one IssueType that matches the filter.
   * @param {IssueTypeFindUniqueArgs} args - Arguments to find a IssueType
   * @example
   * // Get one IssueType
   * const issueType = await prisma.issueType.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends IssueTypeFindUniqueArgs>(args: Prisma.SelectSubset<T, IssueTypeFindUniqueArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one IssueType that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {IssueTypeFindUniqueOrThrowArgs} args - Arguments to find a IssueType
   * @example
   * // Get one IssueType
   * const issueType = await prisma.issueType.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends IssueTypeFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, IssueTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IssueType that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeFindFirstArgs} args - Arguments to find a IssueType
   * @example
   * // Get one IssueType
   * const issueType = await prisma.issueType.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends IssueTypeFindFirstArgs>(args?: Prisma.SelectSubset<T, IssueTypeFindFirstArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first IssueType that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeFindFirstOrThrowArgs} args - Arguments to find a IssueType
   * @example
   * // Get one IssueType
   * const issueType = await prisma.issueType.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends IssueTypeFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, IssueTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more IssueTypes that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all IssueTypes
   * const issueTypes = await prisma.issueType.findMany()
   * 
   * // Get first 10 IssueTypes
   * const issueTypes = await prisma.issueType.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const issueTypeWithIdOnly = await prisma.issueType.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends IssueTypeFindManyArgs>(args?: Prisma.SelectSubset<T, IssueTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a IssueType.
   * @param {IssueTypeCreateArgs} args - Arguments to create a IssueType.
   * @example
   * // Create one IssueType
   * const IssueType = await prisma.issueType.create({
   *   data: {
   *     // ... data to create a IssueType
   *   }
   * })
   * 
   */
  create<T extends IssueTypeCreateArgs>(args: Prisma.SelectSubset<T, IssueTypeCreateArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many IssueTypes.
   * @param {IssueTypeCreateManyArgs} args - Arguments to create many IssueTypes.
   * @example
   * // Create many IssueTypes
   * const issueType = await prisma.issueType.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends IssueTypeCreateManyArgs>(args?: Prisma.SelectSubset<T, IssueTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a IssueType.
   * @param {IssueTypeDeleteArgs} args - Arguments to delete one IssueType.
   * @example
   * // Delete one IssueType
   * const IssueType = await prisma.issueType.delete({
   *   where: {
   *     // ... filter to delete one IssueType
   *   }
   * })
   * 
   */
  delete<T extends IssueTypeDeleteArgs>(args: Prisma.SelectSubset<T, IssueTypeDeleteArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one IssueType.
   * @param {IssueTypeUpdateArgs} args - Arguments to update one IssueType.
   * @example
   * // Update one IssueType
   * const issueType = await prisma.issueType.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends IssueTypeUpdateArgs>(args: Prisma.SelectSubset<T, IssueTypeUpdateArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more IssueTypes.
   * @param {IssueTypeDeleteManyArgs} args - Arguments to filter IssueTypes to delete.
   * @example
   * // Delete a few IssueTypes
   * const { count } = await prisma.issueType.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends IssueTypeDeleteManyArgs>(args?: Prisma.SelectSubset<T, IssueTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more IssueTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many IssueTypes
   * const issueType = await prisma.issueType.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends IssueTypeUpdateManyArgs>(args: Prisma.SelectSubset<T, IssueTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one IssueType.
   * @param {IssueTypeUpsertArgs} args - Arguments to update or create a IssueType.
   * @example
   * // Update or create a IssueType
   * const issueType = await prisma.issueType.upsert({
   *   create: {
   *     // ... data to create a IssueType
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the IssueType we want to update
   *   }
   * })
   */
  upsert<T extends IssueTypeUpsertArgs>(args: Prisma.SelectSubset<T, IssueTypeUpsertArgs<ExtArgs>>): Prisma.Prisma__IssueTypeClient<runtime.Types.Result.GetResult<Prisma.$IssueTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of IssueTypes.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeCountArgs} args - Arguments to filter IssueTypes to count.
   * @example
   * // Count the number of IssueTypes
   * const count = await prisma.issueType.count({
   *   where: {
   *     // ... the filter for the IssueTypes we want to count
   *   }
   * })
  **/
  count<T extends IssueTypeCountArgs>(
    args?: Prisma.Subset<T, IssueTypeCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IssueTypeCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a IssueType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IssueTypeAggregateArgs>(args: Prisma.Subset<T, IssueTypeAggregateArgs>): Prisma.PrismaPromise<GetIssueTypeAggregateType<T>>

  /**
   * Group by IssueType.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IssueTypeGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends IssueTypeGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: IssueTypeGroupByArgs['orderBy'] }
      : { orderBy?: IssueTypeGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, IssueTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIssueTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the IssueType model
 */
readonly fields: IssueTypeFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for IssueType.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__IssueTypeClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  issues<T extends Prisma.IssueType$issuesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.IssueType$issuesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$IssuePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the IssueType model
 */
export interface IssueTypeFieldRefs {
  readonly id: Prisma.FieldRef<"IssueType", 'Int'>
  readonly createdAt: Prisma.FieldRef<"IssueType", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"IssueType", 'DateTime'>
  readonly identifier: Prisma.FieldRef<"IssueType", 'String'>
}
    

// Custom InputTypes
/**
 * IssueType findUnique
 */
export type IssueTypeFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * Filter, which IssueType to fetch.
   */
  where: Prisma.IssueTypeWhereUniqueInput
}

/**
 * IssueType findUniqueOrThrow
 */
export type IssueTypeFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * Filter, which IssueType to fetch.
   */
  where: Prisma.IssueTypeWhereUniqueInput
}

/**
 * IssueType findFirst
 */
export type IssueTypeFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * Filter, which IssueType to fetch.
   */
  where?: Prisma.IssueTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IssueTypes to fetch.
   */
  orderBy?: Prisma.IssueTypeOrderByWithRelationInput | Prisma.IssueTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IssueTypes.
   */
  cursor?: Prisma.IssueTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IssueTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IssueTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IssueTypes.
   */
  distinct?: Prisma.IssueTypeScalarFieldEnum | Prisma.IssueTypeScalarFieldEnum[]
}

/**
 * IssueType findFirstOrThrow
 */
export type IssueTypeFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * Filter, which IssueType to fetch.
   */
  where?: Prisma.IssueTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IssueTypes to fetch.
   */
  orderBy?: Prisma.IssueTypeOrderByWithRelationInput | Prisma.IssueTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for IssueTypes.
   */
  cursor?: Prisma.IssueTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IssueTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IssueTypes.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of IssueTypes.
   */
  distinct?: Prisma.IssueTypeScalarFieldEnum | Prisma.IssueTypeScalarFieldEnum[]
}

/**
 * IssueType findMany
 */
export type IssueTypeFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * Filter, which IssueTypes to fetch.
   */
  where?: Prisma.IssueTypeWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of IssueTypes to fetch.
   */
  orderBy?: Prisma.IssueTypeOrderByWithRelationInput | Prisma.IssueTypeOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing IssueTypes.
   */
  cursor?: Prisma.IssueTypeWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` IssueTypes from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` IssueTypes.
   */
  skip?: number
  distinct?: Prisma.IssueTypeScalarFieldEnum | Prisma.IssueTypeScalarFieldEnum[]
}

/**
 * IssueType create
 */
export type IssueTypeCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * The data needed to create a IssueType.
   */
  data: Prisma.XOR<Prisma.IssueTypeCreateInput, Prisma.IssueTypeUncheckedCreateInput>
}

/**
 * IssueType createMany
 */
export type IssueTypeCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many IssueTypes.
   */
  data: Prisma.IssueTypeCreateManyInput | Prisma.IssueTypeCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * IssueType update
 */
export type IssueTypeUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * The data needed to update a IssueType.
   */
  data: Prisma.XOR<Prisma.IssueTypeUpdateInput, Prisma.IssueTypeUncheckedUpdateInput>
  /**
   * Choose, which IssueType to update.
   */
  where: Prisma.IssueTypeWhereUniqueInput
}

/**
 * IssueType updateMany
 */
export type IssueTypeUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update IssueTypes.
   */
  data: Prisma.XOR<Prisma.IssueTypeUpdateManyMutationInput, Prisma.IssueTypeUncheckedUpdateManyInput>
  /**
   * Filter which IssueTypes to update
   */
  where?: Prisma.IssueTypeWhereInput
  /**
   * Limit how many IssueTypes to update.
   */
  limit?: number
}

/**
 * IssueType upsert
 */
export type IssueTypeUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * The filter to search for the IssueType to update in case it exists.
   */
  where: Prisma.IssueTypeWhereUniqueInput
  /**
   * In case the IssueType found by the `where` argument doesn't exist, create a new IssueType with this data.
   */
  create: Prisma.XOR<Prisma.IssueTypeCreateInput, Prisma.IssueTypeUncheckedCreateInput>
  /**
   * In case the IssueType was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.IssueTypeUpdateInput, Prisma.IssueTypeUncheckedUpdateInput>
}

/**
 * IssueType delete
 */
export type IssueTypeDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
  /**
   * Filter which IssueType to delete.
   */
  where: Prisma.IssueTypeWhereUniqueInput
}

/**
 * IssueType deleteMany
 */
export type IssueTypeDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which IssueTypes to delete
   */
  where?: Prisma.IssueTypeWhereInput
  /**
   * Limit how many IssueTypes to delete.
   */
  limit?: number
}

/**
 * IssueType.issues
 */
export type IssueType$issuesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Issue
   */
  select?: Prisma.IssueSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Issue
   */
  omit?: Prisma.IssueOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueInclude<ExtArgs> | null
  where?: Prisma.IssueWhereInput
  orderBy?: Prisma.IssueOrderByWithRelationInput | Prisma.IssueOrderByWithRelationInput[]
  cursor?: Prisma.IssueWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.IssueScalarFieldEnum | Prisma.IssueScalarFieldEnum[]
}

/**
 * IssueType without action
 */
export type IssueTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the IssueType
   */
  select?: Prisma.IssueTypeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the IssueType
   */
  omit?: Prisma.IssueTypeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.IssueTypeInclude<ExtArgs> | null
}
